* mini project - shopping cart - Rreactjs - Redux
1. Tạo project: mini-shoppingcart
2. cd mini-shoppingcart
    - cài đặt Redux
    npm install --save redux react-redux
3. Chuyển thiết kế từ template 
    - transform.tool
    - chuyển code html -> jsx
    - Copy file tài nguyên (css, fonts, images, js) từ template vào thư mục public của ứng dụng 
        (mini-shoppingcart)
    - Copy mã jsx -> App.js của ứng dụng
    - tạo liên kết tài nguyên (css, js )
4. Phân chia các component
    -App:
        - Title
        - ListProduct
            - Product 
        - Cart
            - CartItem
            - CartTotal
            - Notify
==> 15' hoàn thiện
5. Tổ chức cấu trúc của ứng dụng ReactJS-Redux 
    src:
        + compoonents (views)
        + actions  (Xác định các action trong ứng)
        + constants (xác định cấc hằng số của ứng dụng)
        + reducers (tạo các reducer )
        + store (Tổ chức kho dữ liệu)
6. Tổ chức các compoonents (class component)

7. Tạo các constants cho ứng dụng
    - actionTypes.js 
        + Xử lý các chức năng CRUD cho ứng dụng 
            ++ Load product : "LIST_PRODUCT"
            ++ Mua hàng     : "BUY_ITEM"
            ++ Cập nhật gh  : "UPDATE_ITEM"
            ++ Xóa sản phẩm trong giỏ hàng  : "DELETE_ITEM"
    - messages.js
        + hằng thông báo tương ứng vứi các chức năng
            ++ MSG_LOAD_SUCCESS         : thông báo -> Ready to buy
            ++ MSG_BUY_SUCCESS          :Buy successfull!
            ++ MSG_UPDATE_SUCCESS       :Update successfull!
            ++ MSG_DELETE_SUCCESS       :Remove successfull!
    -LocalStorageName: hằng số lưu trữ dữ liệu giỏ hang

8. Xác định các chức năng trong hệ thống : (action)
    action { type:... , data: ....}
    - chức năng hiện thị thông tin sản phẩm:
        act_list_product: 
            return {type: }
    - chức năng mua hàng: thêm sản phẩm vào giổ hàng
        act_buy_item (product, quantity) => return {
            type:
            product, 
            quantity
        }
    - Chức năng cập nhật giỏ hàng: thêm , bớt số lượng trong giỏ hàng
        act_update_item (product, quantity) => return {
            type:
            product,
            quantity 
        }
    - chuức năng xóa sẩn phẩm trong giỏ hàng
        act_delete_item(product)=> return {
            type:... ,
            product
        }
    - chức năng thông báo: mỗi khi các hành động trên sảy ra => đưa ra thông báo.
        act_change_notify (content)=> return{
            type: ...,
            content 
        }
9. Tạo các reducer -> để xử các action tương ứng
        - listProduct.js: trạng thái dữ liệu cho ListProduct
        - notify.js : trạng thái dữ liệu thông báo
        - cart.js   : trạng thái dữ liệu cho giỏ hàng
        - index.js: kết hợp quản lý trạng thái cho ứng dụng (combine)
10. tạo store  cho ứng dụng 
    index.js 
        createStore của redux 

11. Cung cấp store cho ứng dụng 
    - Sử dụng Provider của react-redux 
        ++ bao trùm <App />
        src -> index.js 
12. Tạo các xử lý với reducer
- listProduct.js => 
- notify.js => 

13. Hiển thị thông báo (Component Notify)
- connect component với store 
- mapStateToProps
// map State từ store -> đến props trong component
const mapStateToProps =(state)=>{
    return {
        message:state.notify,
    }
}
export default connect(mapStateToProps,null)(Notify);
14. Xây dựng xử lý cart.js (reducer) quản lý giỏ hàng - Mua hàng
- Khởi tạo: giỏ hàng rỗng 
- Khi người dùng mua hàng: (Lưu trữ dữ liệu trong LocalStorage)
    -> Phát sinh 2 trạng thái:
        + Lần đầu tiên mua hàng -> push dữ liệu vào giỏ hàng 
        + Đã mua hàng (Giở hàng đã tồn tại): phát sinh 2 trường hợp
            ++ TH1: sản phẩm chưa có trong giỏ hàng => push sản phẩm vào giỏ hàng 
            ++ TH2: sản phẩm đã có trong giỏ hàng => thực hiện cập nhật lại số lượng

15. bắn action mua hàng từ component (Product) -> bắn vào store 
    - Product (Comp):
        ++ quản lý số lượng mua thông qua state (Controlled component)
        ++ xử lý sự kiện mua hàng:
            -> bắn action (act_buy_item) -> vào reducer
                +++ phát sinh sự kiện click trên nút mua hàng 
                +++ dispatch -> 
                +++ connect to store
16. Hiển thị sản phẩm mua từ store lên component (Cart.js)
- Cart:
    ++ mapStateToProps 
    ++ connect to store
    ++ render -> CartItem
    ++ quản lý quantity thông qua state của component
17. Xử lý thông tin CartTotal
- Cart:
    -> list cart -> CartTotal 
    + CartTotal:
        ++ thực hiện việc render có điều kiện

18. Xử lý chức năng xóa 
    - action: (index.js)
        ++ act_delete_item (product)
    - reducers: (cart.js)
        ++ xử lý cho case: DELETE_ITEM
            ++ xóa trong state 
            ++ cập nhật LocalStorage
    - CartItem (Comp):
        + event (Delete)
        + dispatch (act_delete_item) -> store
        + connect (mapDispatchToProps) (CartItem)


19. Xử lý chức năng cập nhật giỏ hàng 
    - action: (index.js)
        act_update_item(product, quantity) 
    - reducers: (cart.js)
        + xử lý trường hợp UPDATE_ITEM
    - event: update 

